{"version":3,"sources":["Home/Home.jsx","LotCard/LotCard.jsx","LotView/LotView.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","props","alert","message","window","location","pathname","substr","id","href","LotCard","state","click","handleClick","bind","this","openLot","images","lotType","lot_type","name","bedrooms","bathrooms","className","src","alt","onClick","Component","LotView","setState","redirect","console","log","undefined","description","gallery","sims","clearLot","e","target","App","user","lots","lot","getProfileData","getLotData","clearUser","getRoute","route","fetch","method","rawResponse","status","json","content","map","mapLots","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7ba7fc47.chunk.js","sourcesContent":["import React from 'react'\nimport './home.css'\nfunction Home(props) {\n  let alert\n  if (props.message === 'lots') {\n    alert = `User \"${window.location.pathname.substr(1)}\" has no lots!`\n  }\n\n  return (\n    <div id=\"home\">\n      <div id=\"message\">\n        <h1>Builds</h1>\n        <p id=\"alert\">{alert}</p>\n        <p>Enter a username in the address bar to visit a profile:</p>\n        <a href=\"https://builds-gallery.herokuapp.com/tori\">\n          <pre>https://builds-gallery.herokuapp.com/tori</pre>\n        </a>\n      </div>\n    </div>\n  )\n}\nexport default Home\n","import React, { Component } from 'react'\n\nimport './lotcard.css'\n\nexport default class LotCard extends Component {\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n      click: false,\n    }\n\n    // Binding `this`\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick() {\n    this.props.openLot(this.props.id)\n  }\n  \n  render() {\n    const {\n      images,\n      lot_type: lotType,\n      name,\n      bedrooms,\n      bathrooms\n    } = this.props\n\n    return (\n      <div className=\"lot-card\">\n        <img src={images} alt={name}></img>\n        <h5 onClick={this.handleClick}>{name}</h5>\n        <p>{lotType}</p>\n        <p>{bedrooms} beds, {bathrooms} baths</p>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nimport './lotview.css'\n\nexport default class LotView extends Component {\n  constructor(props) {\n    super(props)\n\n    // Binding `this`\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick() {\n    this.setState({ redirect: true })\n  }\n  \n  render() {\n    console.log(this.props)\n    if (this.props.id === undefined) {\n      return \"Loading Lot!\"\n    }\n\n    const {\n      name,\n      description,\n      gallery,\n      lot_type: lotType,\n      bedrooms,\n      bathrooms,\n      sims,\n      images,\n\n      clearLot\n    } = this.props\n    return (\n      <div id=\"lot-view-container\">\n        <div id=\"top\">\n          <span id=\"back\" onClick={e => clearLot()}>\n            {window.location.pathname.substr(1)}'s Builds\n          </span>\n        </div>\n        <div id=\"lot-view\">\n          <img src={images} alt=\"Sims Build\" />\n          <h1>{name}</h1>\n          <p id=\"lot-type\">{lotType} Lot</p>\n          { lotType === 'Residential' &&\n            <p id=\"lot-numbers\">{bedrooms} bedrooms / {bathrooms} bathrooms / sleeps {sims} sims</p>\n          }\n          { lotType === 'Rental' &&\n            <p id=\"lot-numbers\">{bedrooms} bedrooms / {bathrooms} bathrooms / sleeps {sims} sims</p>\n          }\n          <p id=\"lot-description\">{description}</p>\n          <p id=\"lot-link\"><a href={gallery} target=\"_blank\">View on the Sims 4 Gallery</a></p>\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nimport Home from './Home/Home'\nimport LotCard from './LotCard/LotCard'\nimport LotView from './LotView/LotView'\n\nimport './App.css'\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n      user: undefined,\n      lots: undefined,\n      lot: undefined,\n    }\n\n    // Binding `this`\n    this.getProfileData = this.getProfileData.bind(this)\n    this.getLotData = this.getLotData.bind(this)\n    this.openLot = this.openLot.bind(this)\n    this.clearLot = this.clearLot.bind(this)\n    this.clearUser = this.clearUser.bind(this)\n  }\n\n  componentDidMount() {\n    // Get route from URL on mount\n    this.getRoute()\n  }\n\n  componentDidUpdate() {\n    const { user, lots, lot } = this.state\n    // If user is set, but lots aren't yet retrieved\n    if (user && !lots) {\n      this.getProfileData()\n    }\n    if (lot) {\n      // If lot only holds an ID\n      if (typeof lot == 'number') {\n        this.getLotData()\n      }\n    }\n  }\n\n  getRoute() {\n    // Get Route from URL\n    const route = window.location.pathname\n    // If Route starts with '/', get following string\n    if (route[0] === '/') {\n      this.setState({ user: route.substr(1) })\n    }\n  }\n\n  async getProfileData() {\n    const { user } = this.state\n\n    // Send GET request to API with user's data from state\n    const rawResponse = await fetch(`api/lots/user/${user}`, { method: 'GET' })\n\n    if (await rawResponse.status === 200) {\n      // Parse response to JSON\n      const content = await rawResponse.json()\n\n      // Set `this.state.lots` to content\n      this.setState({ lots: await content })\n    } else if (await rawResponse.status === 404) {\n      this.setState({ lots: 404 })\n    }\n  }\n\n  async getLotData() {\n    const { lot } = this.state\n    // Send GET request to API with user's data from props\n    const rawResponse = await fetch(`api/lots/${lot}`, { method: 'GET' })\n\n    if (await rawResponse.status === 200) {\n      // Parse response to JSON\n      const content = await rawResponse.json()\n\n      // Set `this.state.lot` to content\n      this.setState({ lot: await content })\n    } else {\n      // If API doesn't respond to GET request\n      this.setState({ lots: 404 })\n    }\n  }\n\n  mapLots() {\n    const { lots } = this.state\n\n    // Map lots into cards\n    if (lots) {\n      return lots.map(lot => (\n        <LotCard {...lot} openLot={this.openLot} />\n      ))\n    } else {\n      return 'Loading Lots!'\n    }\n  }\n\n  openLot(id) {\n    this.setState({ lot: id })\n  }\n\n  clearLot() {\n    this.setState({ lot: undefined })\n  }\n\n  clearUser() {\n    // Clear all state to rerender Home page\n    // TODO: manipulate URL to reflect cleared username\n    this.setState({ user: undefined })\n    this.setState({ lots: undefined })\n    this.setState({ lot: undefined })\n  }\n  \n  render() {\n    const { lots, lot, user } = this.state\n    if (lot) {\n      return <LotView {...lot} clearLot={this.clearLot} />\n      // return component containing the lot\n      // when X is clicked in corner, clear `this.state.lot`\n    }\n    // If lots has value\n    if (lots) {\n      // If the API returned 404, return Home with a no-lots prop\n      if (lots === 404) {\n        return <Home message=\"lots\" />\n      }\n      return (\n        <div id=\"lot-cards-view\">\n          <h1 onClick={this.clearUser}>Builds</h1>\n          <h2>from {user}</h2>\n          <div id=\"lot-cards\">\n            {this.mapLots()}\n          </div>\n        </div>\n      )\n    }\n    // Else, return Home\n    return (\n      <Home />\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}